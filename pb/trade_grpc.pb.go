// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: trade.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KlineServiceClient is the client API for KlineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KlineServiceClient interface {
	StreamKlines(ctx context.Context, in *TradeRequest, opts ...grpc.CallOption) (KlineService_StreamKlinesClient, error)
}

type klineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKlineServiceClient(cc grpc.ClientConnInterface) KlineServiceClient {
	return &klineServiceClient{cc}
}

func (c *klineServiceClient) StreamKlines(ctx context.Context, in *TradeRequest, opts ...grpc.CallOption) (KlineService_StreamKlinesClient, error) {
	stream, err := c.cc.NewStream(ctx, &KlineService_ServiceDesc.Streams[0], "/KlineService/StreamKlines", opts...)
	if err != nil {
		return nil, err
	}
	x := &klineServiceStreamKlinesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KlineService_StreamKlinesClient interface {
	Recv() (*KlineData, error)
	grpc.ClientStream
}

type klineServiceStreamKlinesClient struct {
	grpc.ClientStream
}

func (x *klineServiceStreamKlinesClient) Recv() (*KlineData, error) {
	m := new(KlineData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KlineServiceServer is the server API for KlineService service.
// All implementations must embed UnimplementedKlineServiceServer
// for forward compatibility
type KlineServiceServer interface {
	StreamKlines(*TradeRequest, KlineService_StreamKlinesServer) error
	mustEmbedUnimplementedKlineServiceServer()
}

// UnimplementedKlineServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKlineServiceServer struct {
}

func (UnimplementedKlineServiceServer) StreamKlines(*TradeRequest, KlineService_StreamKlinesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamKlines not implemented")
}
func (UnimplementedKlineServiceServer) mustEmbedUnimplementedKlineServiceServer() {}

// UnsafeKlineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KlineServiceServer will
// result in compilation errors.
type UnsafeKlineServiceServer interface {
	mustEmbedUnimplementedKlineServiceServer()
}

func RegisterKlineServiceServer(s grpc.ServiceRegistrar, srv KlineServiceServer) {
	s.RegisterService(&KlineService_ServiceDesc, srv)
}

func _KlineService_StreamKlines_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TradeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KlineServiceServer).StreamKlines(m, &klineServiceStreamKlinesServer{stream})
}

type KlineService_StreamKlinesServer interface {
	Send(*KlineData) error
	grpc.ServerStream
}

type klineServiceStreamKlinesServer struct {
	grpc.ServerStream
}

func (x *klineServiceStreamKlinesServer) Send(m *KlineData) error {
	return x.ServerStream.SendMsg(m)
}

// KlineService_ServiceDesc is the grpc.ServiceDesc for KlineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KlineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "KlineService",
	HandlerType: (*KlineServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamKlines",
			Handler:       _KlineService_StreamKlines_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "trade.proto",
}
